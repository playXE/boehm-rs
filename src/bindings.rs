/* automatically generated by rust-bindgen */

use core as std;



pub const GC_TMP_VERSION_MAJOR: u32 = 7;
pub const GC_TMP_VERSION_MINOR: u32 = 6;
pub const GC_TMP_VERSION_MICRO: u32 = 4;
pub const GC_VERSION_MAJOR: u32 = 7;
pub const GC_VERSION_MINOR: u32 = 6;
pub const GC_VERSION_MICRO: u32 = 4;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const GC_TIME_UNLIMITED: u32 = 999999;
pub const GC_PROTECTS_POINTER_HEAP: u32 = 1;
pub const GC_PROTECTS_PTRFREE_HEAP: u32 = 2;
pub const GC_PROTECTS_STATIC_DATA: u32 = 4;
pub const GC_PROTECTS_STACK: u32 = 8;
pub const GC_PROTECTS_NONE: u32 = 0;
pub const GC_NO_MEMORY: u32 = 2;
pub const GC_SUCCESS: u32 = 0;
pub const GC_DUPLICATE: u32 = 1;
pub const GC_NO_THREADS: u32 = 2;
pub const GC_UNIMPLEMENTED: u32 = 3;
pub const GC_NOT_FOUND: u32 = 4;
pub type wchar_t = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: i64,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type GC_PTR = *mut u8;
pub type GC_word = u64;
pub type GC_signed_word = i64;
extern "C" {
    pub fn GC_get_version() -> u32;
}
extern "C" {
    #[link_name = "\u{1}GC_gc_no"]
    pub static mut GC_gc_no: GC_word;
}
extern "C" {
    pub fn GC_get_gc_no() -> GC_word;
}
pub type GC_oom_func =
    std::option::Option<unsafe extern "C" fn(arg1: usize) -> *mut u8>;
extern "C" {
    #[link_name = "\u{1}GC_oom_fn"]
    pub static mut GC_oom_fn: GC_oom_func;
}
extern "C" {
    pub fn GC_set_oom_fn(arg1: GC_oom_func);
}
extern "C" {
    pub fn GC_get_oom_fn() -> GC_oom_func;
}
pub type GC_on_heap_resize_proc = std::option::Option<unsafe extern "C" fn(arg1: GC_word)>;
extern "C" {
    #[link_name = "\u{1}GC_on_heap_resize"]
    pub static mut GC_on_heap_resize: GC_on_heap_resize_proc;
}
extern "C" {
    pub fn GC_set_on_heap_resize(arg1: GC_on_heap_resize_proc);
}
extern "C" {
    pub fn GC_get_on_heap_resize() -> GC_on_heap_resize_proc;
}
pub const GC_EventType_GC_EVENT_START: GC_EventType = 0;
pub const GC_EventType_GC_EVENT_MARK_START: GC_EventType = 1;
pub const GC_EventType_GC_EVENT_MARK_END: GC_EventType = 2;
pub const GC_EventType_GC_EVENT_RECLAIM_START: GC_EventType = 3;
pub const GC_EventType_GC_EVENT_RECLAIM_END: GC_EventType = 4;
pub const GC_EventType_GC_EVENT_END: GC_EventType = 5;
pub const GC_EventType_GC_EVENT_PRE_STOP_WORLD: GC_EventType = 6;
pub const GC_EventType_GC_EVENT_POST_STOP_WORLD: GC_EventType = 7;
pub const GC_EventType_GC_EVENT_PRE_START_WORLD: GC_EventType = 8;
pub const GC_EventType_GC_EVENT_POST_START_WORLD: GC_EventType = 9;
pub const GC_EventType_GC_EVENT_THREAD_SUSPENDED: GC_EventType = 10;
pub const GC_EventType_GC_EVENT_THREAD_UNSUSPENDED: GC_EventType = 11;
pub type GC_EventType = u32;
pub type GC_on_collection_event_proc =
    std::option::Option<unsafe extern "C" fn(arg1: GC_EventType)>;
extern "C" {
    pub fn GC_set_on_collection_event(arg1: GC_on_collection_event_proc);
}
extern "C" {
    pub fn GC_get_on_collection_event() -> GC_on_collection_event_proc;
}
extern "C" {
    #[link_name = "\u{1}GC_find_leak"]
    pub static mut GC_find_leak: i32;
}
extern "C" {
    pub fn GC_set_find_leak(arg1: i32);
}
extern "C" {
    pub fn GC_get_find_leak() -> i32;
}
extern "C" {
    #[link_name = "\u{1}GC_all_interior_pointers"]
    pub static mut GC_all_interior_pointers: i32;
}
extern "C" {
    pub fn GC_set_all_interior_pointers(arg1: i32);
}
extern "C" {
    pub fn GC_get_all_interior_pointers() -> i32;
}
extern "C" {
    #[link_name = "\u{1}GC_finalize_on_demand"]
    pub static mut GC_finalize_on_demand: i32;
}
extern "C" {
    pub fn GC_set_finalize_on_demand(arg1: i32);
}
extern "C" {
    pub fn GC_get_finalize_on_demand() -> i32;
}
extern "C" {
    #[link_name = "\u{1}GC_java_finalization"]
    pub static mut GC_java_finalization: i32;
}
extern "C" {
    pub fn GC_set_java_finalization(arg1: i32);
}
extern "C" {
    pub fn GC_get_java_finalization() -> i32;
}
pub type GC_finalizer_notifier_proc = std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}GC_finalizer_notifier"]
    pub static mut GC_finalizer_notifier: GC_finalizer_notifier_proc;
}
extern "C" {
    pub fn GC_set_finalizer_notifier(arg1: GC_finalizer_notifier_proc);
}
extern "C" {
    pub fn GC_get_finalizer_notifier() -> GC_finalizer_notifier_proc;
}
extern "C" {
    #[link_name = "\u{1}GC_dont_gc"]
    pub static mut GC_dont_gc: i32;
}
extern "C" {
    #[link_name = "\u{1}GC_dont_expand"]
    pub static mut GC_dont_expand: i32;
}
extern "C" {
    pub fn GC_set_dont_expand(arg1: i32);
}
extern "C" {
    pub fn GC_get_dont_expand() -> i32;
}
extern "C" {
    #[link_name = "\u{1}GC_use_entire_heap"]
    pub static mut GC_use_entire_heap: i32;
}
extern "C" {
    #[link_name = "\u{1}GC_full_freq"]
    pub static mut GC_full_freq: i32;
}
extern "C" {
    pub fn GC_set_full_freq(arg1: i32);
}
extern "C" {
    pub fn GC_get_full_freq() -> i32;
}
extern "C" {
    #[link_name = "\u{1}GC_non_gc_bytes"]
    pub static mut GC_non_gc_bytes: GC_word;
}
extern "C" {
    pub fn GC_set_non_gc_bytes(arg1: GC_word);
}
extern "C" {
    pub fn GC_get_non_gc_bytes() -> GC_word;
}
extern "C" {
    #[link_name = "\u{1}GC_no_dls"]
    pub static mut GC_no_dls: i32;
}
extern "C" {
    pub fn GC_set_no_dls(arg1: i32);
}
extern "C" {
    pub fn GC_get_no_dls() -> i32;
}
extern "C" {
    #[link_name = "\u{1}GC_free_space_divisor"]
    pub static mut GC_free_space_divisor: GC_word;
}
extern "C" {
    pub fn GC_set_free_space_divisor(arg1: GC_word);
}
extern "C" {
    pub fn GC_get_free_space_divisor() -> GC_word;
}
extern "C" {
    #[link_name = "\u{1}GC_max_retries"]
    pub static mut GC_max_retries: GC_word;
}
extern "C" {
    pub fn GC_set_max_retries(arg1: GC_word);
}
extern "C" {
    pub fn GC_get_max_retries() -> GC_word;
}
extern "C" {
    #[link_name = "\u{1}GC_stackbottom"]
    pub static mut GC_stackbottom: *mut u32;
}
extern "C" {
    #[link_name = "\u{1}GC_dont_precollect"]
    pub static mut GC_dont_precollect: i32;
}
extern "C" {
    pub fn GC_set_dont_precollect(arg1: i32);
}
extern "C" {
    pub fn GC_get_dont_precollect() -> i32;
}
extern "C" {
    #[link_name = "\u{1}GC_time_limit"]
    pub static mut GC_time_limit: u64;
}
extern "C" {
    pub fn GC_set_time_limit(arg1: u64);
}
extern "C" {
    pub fn GC_get_time_limit() -> u64;
}
extern "C" {
    pub fn GC_set_pages_executable(arg1: i32);
}
extern "C" {
    pub fn GC_get_pages_executable() -> i32;
}
extern "C" {
    pub fn GC_set_handle_fork(arg1: i32);
}
extern "C" {
    pub fn GC_atfork_prepare();
}
extern "C" {
    pub fn GC_atfork_parent();
}
extern "C" {
    pub fn GC_atfork_child();
}
extern "C" {
    pub fn GC_init();
}
extern "C" {
    pub fn GC_is_init_called() -> i32;
}
extern "C" {
    pub fn GC_malloc(arg1: usize) -> *mut u8;
}
extern "C" {
    pub fn GC_malloc_atomic(arg1: usize) -> *mut u8;
}
extern "C" {
    pub fn GC_strdup(arg1: *const u32) -> *mut u32;
}
extern "C" {
    pub fn GC_strndup(
        arg1: *const u32,
        arg2: usize,
    ) -> *mut u32;
}
extern "C" {
    pub fn GC_malloc_uncollectable(arg1: usize) -> *mut u8;
}
extern "C" {
    pub fn GC_malloc_stubborn(arg1: usize) -> *mut u8;
}
extern "C" {
    pub fn GC_memalign(arg1: usize, arg2: usize) -> *mut u8;
}
extern "C" {
    pub fn GC_posix_memalign(
        arg1: *mut *mut u8,
        arg2: usize,
        arg3: usize,
    ) -> i32;
}
extern "C" {
    pub fn GC_free(arg1: *mut u8);
}
extern "C" {
    pub fn GC_change_stubborn(arg1: *const u8);
}
extern "C" {
    pub fn GC_end_stubborn_change(arg1: *const u8);
}
extern "C" {
    pub fn GC_base(arg1: *mut u8) -> *mut u8;
}
extern "C" {
    pub fn GC_is_heap_ptr(arg1: *const u8) -> i32;
}
extern "C" {
    pub fn GC_size(arg1: *const u8) -> usize;
}
extern "C" {
    pub fn GC_realloc(
        arg1: *mut u8,
        arg2: usize,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_expand_hp(arg1: usize) -> i32;
}
extern "C" {
    pub fn GC_set_max_heap_size(arg1: GC_word);
}
extern "C" {
    pub fn GC_exclude_static_roots(
        arg1: *mut u8,
        arg2: *mut u8,
    );
}
extern "C" {
    pub fn GC_clear_roots();
}
extern "C" {
    pub fn GC_add_roots(arg1: *mut u8, arg2: *mut u8);
}
extern "C" {
    pub fn GC_remove_roots(arg1: *mut u8, arg2: *mut u8);
}
extern "C" {
    pub fn GC_register_displacement(arg1: usize);
}
extern "C" {
    pub fn GC_debug_register_displacement(arg1: usize);
}
extern "C" {
    pub fn GC_gcollect();
}
extern "C" {
    pub fn GC_gcollect_and_unmap();
}
pub type GC_stop_func = std::option::Option<unsafe extern "C" fn() -> i32>;
extern "C" {
    pub fn GC_try_to_collect(arg1: GC_stop_func) -> i32;
}
extern "C" {
    pub fn GC_set_stop_func(arg1: GC_stop_func);
}
extern "C" {
    pub fn GC_get_stop_func() -> GC_stop_func;
}
extern "C" {
    pub fn GC_get_heap_size() -> usize;
}
extern "C" {
    pub fn GC_get_free_bytes() -> usize;
}
extern "C" {
    pub fn GC_get_unmapped_bytes() -> usize;
}
extern "C" {
    pub fn GC_get_bytes_since_gc() -> usize;
}
extern "C" {
    pub fn GC_get_total_bytes() -> usize;
}
extern "C" {
    pub fn GC_get_heap_usage_safe(
        arg1: *mut GC_word,
        arg2: *mut GC_word,
        arg3: *mut GC_word,
        arg4: *mut GC_word,
        arg5: *mut GC_word,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GC_prof_stats_s {
    pub heapsize_full: GC_word,
    pub free_bytes_full: GC_word,
    pub unmapped_bytes: GC_word,
    pub bytes_allocd_since_gc: GC_word,
    pub allocd_bytes_before_gc: GC_word,
    pub non_gc_bytes: GC_word,
    pub gc_no: GC_word,
    pub markers_m1: GC_word,
    pub bytes_reclaimed_since_gc: GC_word,
    pub reclaimed_bytes_before_gc: GC_word,
}
#[test]
fn bindgen_test_layout_GC_prof_stats_s() {
    assert_eq!(
        std::mem::size_of::<GC_prof_stats_s>(),
        80usize,
        concat!("Size of: ", stringify!(GC_prof_stats_s))
    );
    assert_eq!(
        std::mem::align_of::<GC_prof_stats_s>(),
        8usize,
        concat!("Alignment of ", stringify!(GC_prof_stats_s))
    );
    assert_eq!(
        unsafe { &(*(std::ptr::null::<GC_prof_stats_s>())).heapsize_full as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GC_prof_stats_s),
            "::",
            stringify!(heapsize_full)
        )
    );
    assert_eq!(
        unsafe { &(*(std::ptr::null::<GC_prof_stats_s>())).free_bytes_full as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GC_prof_stats_s),
            "::",
            stringify!(free_bytes_full)
        )
    );
    assert_eq!(
        unsafe { &(*(std::ptr::null::<GC_prof_stats_s>())).unmapped_bytes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GC_prof_stats_s),
            "::",
            stringify!(unmapped_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(std::ptr::null::<GC_prof_stats_s>())).bytes_allocd_since_gc as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GC_prof_stats_s),
            "::",
            stringify!(bytes_allocd_since_gc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(std::ptr::null::<GC_prof_stats_s>())).allocd_bytes_before_gc as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GC_prof_stats_s),
            "::",
            stringify!(allocd_bytes_before_gc)
        )
    );
    assert_eq!(
        unsafe { &(*(std::ptr::null::<GC_prof_stats_s>())).non_gc_bytes as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GC_prof_stats_s),
            "::",
            stringify!(non_gc_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(std::ptr::null::<GC_prof_stats_s>())).gc_no as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GC_prof_stats_s),
            "::",
            stringify!(gc_no)
        )
    );
    assert_eq!(
        unsafe { &(*(std::ptr::null::<GC_prof_stats_s>())).markers_m1 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GC_prof_stats_s),
            "::",
            stringify!(markers_m1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(std::ptr::null::<GC_prof_stats_s>())).bytes_reclaimed_since_gc as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GC_prof_stats_s),
            "::",
            stringify!(bytes_reclaimed_since_gc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(std::ptr::null::<GC_prof_stats_s>())).reclaimed_bytes_before_gc as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GC_prof_stats_s),
            "::",
            stringify!(reclaimed_bytes_before_gc)
        )
    );
}
extern "C" {
    pub fn GC_get_prof_stats(arg1: *mut GC_prof_stats_s, arg2: usize) -> usize;
}
extern "C" {
    pub fn GC_get_memory_use() -> usize;
}
extern "C" {
    pub fn GC_disable();
}
extern "C" {
    pub fn GC_is_disabled() -> i32;
}
extern "C" {
    pub fn GC_enable();
}
extern "C" {
    pub fn GC_enable_incremental();
}
extern "C" {
    pub fn GC_incremental_protection_needs() -> i32;
}
extern "C" {
    pub fn GC_collect_a_little() -> i32;
}
extern "C" {
    pub fn GC_malloc_ignore_off_page(arg1: usize) -> *mut u8;
}
extern "C" {
    pub fn GC_malloc_atomic_ignore_off_page(arg1: usize) -> *mut u8;
}
extern "C" {
    pub fn GC_malloc_atomic_uncollectable(arg1: usize) -> *mut u8;
}
extern "C" {
    pub fn GC_debug_malloc_atomic_uncollectable(
        arg1: usize,
        s: *const u32,
        i: i32,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_debug_malloc(
        arg1: usize,
        s: *const u32,
        i: i32,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_debug_malloc_atomic(
        arg1: usize,
        s: *const u32,
        i: i32,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_debug_strdup(
        arg1: *const u32,
        s: *const u32,
        i: i32,
    ) -> *mut u32;
}
extern "C" {
    pub fn GC_debug_strndup(
        arg1: *const u32,
        arg2: usize,
        s: *const u32,
        i: i32,
    ) -> *mut u32;
}
extern "C" {
    pub fn GC_debug_malloc_uncollectable(
        arg1: usize,
        s: *const u32,
        i: i32,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_debug_malloc_stubborn(
        arg1: usize,
        s: *const u32,
        i: i32,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_debug_malloc_ignore_off_page(
        arg1: usize,
        s: *const u32,
        i: i32,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_debug_malloc_atomic_ignore_off_page(
        arg1: usize,
        s: *const u32,
        i: i32,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_debug_free(arg1: *mut u8);
}
extern "C" {
    pub fn GC_debug_realloc(
        arg1: *mut u8,
        arg2: usize,
        s: *const u32,
        i: i32,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_debug_change_stubborn(arg1: *const u8);
}
extern "C" {
    pub fn GC_debug_end_stubborn_change(arg1: *const u8);
}
extern "C" {
    pub fn GC_debug_malloc_replacement(arg1: usize) -> *mut u8;
}
extern "C" {
    pub fn GC_debug_realloc_replacement(
        arg1: *mut u8,
        arg2: usize,
    ) -> *mut u8;
}
pub type GC_finalization_proc = std::option::Option<
    unsafe extern "C" fn(arg1: *mut u8, arg2: *mut u8),
>;
extern "C" {
    pub fn GC_register_finalizer(
        arg1: *mut u8,
        arg2: GC_finalization_proc,
        arg3: *mut u8,
        arg4: *mut GC_finalization_proc,
        arg5: *mut *mut u8,
    );
}
extern "C" {
    pub fn GC_debug_register_finalizer(
        arg1: *mut u8,
        arg2: GC_finalization_proc,
        arg3: *mut u8,
        arg4: *mut GC_finalization_proc,
        arg5: *mut *mut u8,
    );
}
extern "C" {
    pub fn GC_register_finalizer_ignore_self(
        arg1: *mut u8,
        arg2: GC_finalization_proc,
        arg3: *mut u8,
        arg4: *mut GC_finalization_proc,
        arg5: *mut *mut u8,
    );
}
extern "C" {
    pub fn GC_debug_register_finalizer_ignore_self(
        arg1: *mut u8,
        arg2: GC_finalization_proc,
        arg3: *mut u8,
        arg4: *mut GC_finalization_proc,
        arg5: *mut *mut u8,
    );
}
extern "C" {
    pub fn GC_register_finalizer_no_order(
        arg1: *mut u8,
        arg2: GC_finalization_proc,
        arg3: *mut u8,
        arg4: *mut GC_finalization_proc,
        arg5: *mut *mut u8,
    );
}
extern "C" {
    pub fn GC_debug_register_finalizer_no_order(
        arg1: *mut u8,
        arg2: GC_finalization_proc,
        arg3: *mut u8,
        arg4: *mut GC_finalization_proc,
        arg5: *mut *mut u8,
    );
}
extern "C" {
    pub fn GC_register_finalizer_unreachable(
        arg1: *mut u8,
        arg2: GC_finalization_proc,
        arg3: *mut u8,
        arg4: *mut GC_finalization_proc,
        arg5: *mut *mut u8,
    );
}
extern "C" {
    pub fn GC_debug_register_finalizer_unreachable(
        arg1: *mut u8,
        arg2: GC_finalization_proc,
        arg3: *mut u8,
        arg4: *mut GC_finalization_proc,
        arg5: *mut *mut u8,
    );
}
extern "C" {
    pub fn GC_register_disappearing_link(
        arg1: *mut *mut u8,
    ) -> i32;
}
extern "C" {
    pub fn GC_general_register_disappearing_link(
        arg1: *mut *mut u8,
        arg2: *const u8,
    ) -> i32;
}
extern "C" {
    pub fn GC_move_disappearing_link(
        arg1: *mut *mut u8,
        arg2: *mut *mut u8,
    ) -> i32;
}
extern "C" {
    pub fn GC_unregister_disappearing_link(
        arg1: *mut *mut u8,
    ) -> i32;
}
extern "C" {
    pub fn GC_register_long_link(
        arg1: *mut *mut u8,
        arg2: *const u8,
    ) -> i32;
}
extern "C" {
    pub fn GC_move_long_link(
        arg1: *mut *mut u8,
        arg2: *mut *mut u8,
    ) -> i32;
}
extern "C" {
    pub fn GC_unregister_long_link(arg1: *mut *mut u8)
        -> i32;
}
pub const GC_ToggleRefStatus_GC_TOGGLE_REF_DROP: GC_ToggleRefStatus = 0;
pub const GC_ToggleRefStatus_GC_TOGGLE_REF_STRONG: GC_ToggleRefStatus = 1;
pub const GC_ToggleRefStatus_GC_TOGGLE_REF_WEAK: GC_ToggleRefStatus = 2;
pub type GC_ToggleRefStatus = u32;
pub type GC_toggleref_func = std::option::Option<
    unsafe extern "C" fn(arg1: *mut u8) -> GC_ToggleRefStatus,
>;
extern "C" {
    pub fn GC_set_toggleref_func(arg1: GC_toggleref_func);
}
extern "C" {
    pub fn GC_get_toggleref_func() -> GC_toggleref_func;
}
extern "C" {
    pub fn GC_toggleref_add(
        arg1: *mut u8,
        arg2: i32,
    ) -> i32;
}
pub type GC_await_finalize_proc =
    std::option::Option<unsafe extern "C" fn(arg1: *mut u8)>;
extern "C" {
    pub fn GC_set_await_finalize_proc(arg1: GC_await_finalize_proc);
}
extern "C" {
    pub fn GC_get_await_finalize_proc() -> GC_await_finalize_proc;
}
extern "C" {
    pub fn GC_should_invoke_finalizers() -> i32;
}
extern "C" {
    pub fn GC_invoke_finalizers() -> i32;
}
pub type GC_warn_proc =
    std::option::Option<unsafe extern "C" fn(arg1: *mut u32, arg2: GC_word)>;
extern "C" {
    pub fn GC_set_warn_proc(arg1: GC_warn_proc);
}
extern "C" {
    pub fn GC_get_warn_proc() -> GC_warn_proc;
}
extern "C" {
    pub fn GC_ignore_warn_proc(arg1: *mut u32, arg2: GC_word);
}
extern "C" {
    pub fn GC_set_log_fd(arg1: i32);
}
pub type GC_abort_func =
    std::option::Option<unsafe extern "C" fn(arg1: *const u32)>;
extern "C" {
    pub fn GC_set_abort_func(arg1: GC_abort_func);
}
extern "C" {
    pub fn GC_get_abort_func() -> GC_abort_func;
}
pub type GC_hidden_pointer = GC_word;
pub type GC_fn_type = std::option::Option<
    unsafe extern "C" fn(arg1: *mut u8) -> *mut u8,
>;
extern "C" {
    pub fn GC_call_with_alloc_lock(
        arg1: GC_fn_type,
        arg2: *mut u8,
    ) -> *mut u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GC_stack_base {
    pub mem_base: *mut u8,
}
#[test]
fn bindgen_test_layout_GC_stack_base() {
    assert_eq!(
        std::mem::size_of::<GC_stack_base>(),
        8usize,
        concat!("Size of: ", stringify!(GC_stack_base))
    );
    assert_eq!(
        std::mem::align_of::<GC_stack_base>(),
        8usize,
        concat!("Alignment of ", stringify!(GC_stack_base))
    );
    assert_eq!(
        unsafe { &(*(std::ptr::null::<GC_stack_base>())).mem_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GC_stack_base),
            "::",
            stringify!(mem_base)
        )
    );
}
pub type GC_stack_base_func = std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut GC_stack_base,
        arg2: *mut u8,
    ) -> *mut u8,
>;
extern "C" {
    pub fn GC_call_with_stack_base(
        arg1: GC_stack_base_func,
        arg2: *mut u8,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_do_blocking(
        arg1: GC_fn_type,
        arg2: *mut u8,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_call_with_gc_active(
        arg1: GC_fn_type,
        arg2: *mut u8,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_get_stack_base(arg1: *mut GC_stack_base) -> i32;
}
extern "C" {
    pub fn GC_same_obj(
        arg1: *mut u8,
        arg2: *mut u8,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_pre_incr(
        arg1: *mut *mut u8,
        arg2: isize,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_post_incr(
        arg1: *mut *mut u8,
        arg2: isize,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_is_visible(arg1: *mut u8) -> *mut u8;
}
extern "C" {
    pub fn GC_is_valid_displacement(
        arg1: *mut u8,
    ) -> *mut u8;
}
extern "C" {
    pub fn GC_dump();
}
extern "C" {
    pub fn GC_dump_regions();
}
extern "C" {
    pub fn GC_dump_finalization();
}
extern "C" {
    #[link_name = "\u{1}GC_same_obj_print_proc"]
    pub static mut GC_same_obj_print_proc: std::option::Option<
        unsafe extern "C" fn(arg1: *mut u8, arg2: *mut u8),
    >;
}
extern "C" {
    #[link_name = "\u{1}GC_is_valid_displacement_print_proc"]
    pub static mut GC_is_valid_displacement_print_proc:
        std::option::Option<unsafe extern "C" fn(arg1: *mut u8)>;
}
extern "C" {
    #[link_name = "\u{1}GC_is_visible_print_proc"]
    pub static mut GC_is_visible_print_proc:
        std::option::Option<unsafe extern "C" fn(arg1: *mut u8)>;
}
extern "C" {
    pub fn GC_malloc_many(arg1: usize) -> *mut u8;
}
pub type GC_has_static_roots_func = std::option::Option<
    unsafe extern "C" fn(
        arg1: *const u32,
        arg2: *mut u8,
        arg3: usize,
    ) -> i32,
>;
extern "C" {
    pub fn GC_register_has_static_roots_callback(arg1: GC_has_static_roots_func);
}
extern "C" {
    pub fn GC_set_force_unmap_on_gcollect(arg1: i32);
}
extern "C" {
    pub fn GC_get_force_unmap_on_gcollect() -> i32;
}
extern "C" {
    pub fn GC_win32_free_heap();
}
